/* DO NOT EDIT THIS FILE - it is machine generated */
#include "org_daemon_wrapper_LibC.h"
#include "daemon.h"
#include <stdint.h>
#include <stdio.h>  
#include <stdlib.h>  
#include <string.h>  
#include <unistd.h>  
#include <fcntl.h>
#include <sys/types.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include "daemon.h"

wrapper_shm_t *shm;
int shmid=0;
JNIEXPORT jint JNICALL Java_org_daemon_wrapper_LibC_init
  (JNIEnv *, jclass, jint jshmid){
	shmid = jshmid;
	shm = (wrapper_shm_t *)shmat(shmid, (void *)0, 0);
	if (shm == (void *)-1) 
	{
		fprintf(stderr, "shmat failed\n");
		exit(EXIT_FAILURE);
	}
	return 0;
  }
/*
 * Class:     org_daemon_wrapper_LibC
 * Method:    getpid
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_daemon_wrapper_LibC_getpid
  (JNIEnv *env, jclass claz){
	  return getpid();
  }
JNIEXPORT jint JNICALL Java_org_daemon_wrapper_LibC_notifydp
  (JNIEnv *env, jclass claz){
	  shm->dp.status=0;
	  return 0;
  }
  /*
 * Class:     org_daemon_wrapper_LibC
 * Method:    getcpid
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_daemon_wrapper_LibC_getwpid
  (JNIEnv *, jclass){
	  return shm->wp.pid;
  }
/*
 * Class:     org_daemon_wrapper_LibC
 * Method:    daemon
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_org_daemon_wrapper_LibC_daemon
  (JNIEnv *env, jclass, jint nochdir, jint noclose){
	  int fd;

    switch (fork()) {
    case -1:
        return (-1);
    case 0:
        break;
    default:
        _exit(EXIT_SUCCESS);
    }

    if (setsid() == -1)
        return (-1);

    if (nochdir == 0) {
        if(chdir("/") != 0) {
            perror("chdir");
            return (-1);
        }
    }

    if (noclose == 0 && (fd = open("/dev/null", O_RDWR, 0)) != -1) {
        if(dup2(fd, STDIN_FILENO) < 0) {
            perror("dup2 stdin");
            return (-1);
        }
        if(dup2(fd, STDOUT_FILENO) < 0) {
            perror("dup2 stdout");
            return (-1);
        }
        if(dup2(fd, STDERR_FILENO) < 0) {
            perror("dup2 stderr");
            return (-1);
        }

        if (fd > STDERR_FILENO) {
            if(close(fd) < 0) {
                perror("close");
                return (-1);
            }
        }
    }
	  return 0;
  }

/*
 * Class:     org_daemon_wrapper_LibC
 * Method:    fork
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_daemon_wrapper_LibC_fork
  (JNIEnv *env, jclass claz){
	  
	  return fork();
  }

/*
 * Class:     org_daemon_wrapper_LibC
 * Method:    kill
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_org_daemon_wrapper_LibC_kill
  (JNIEnv *env, jclass claz, jint pid, jint sig){
	  
	  return kill(pid, sig);
  }
  
/*
 * Class:     org_daemon_wrapper_LibC
 * Method:    exit
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_org_daemon_wrapper_LibC_exit
  (JNIEnv *, jclass, jint state){
	  exit(state);
  }

/*
 * Class:     org_daemon_wrapper_LibC
 * Method:    pipe
 * Signature: ([I)I
 */
JNIEXPORT jintArray JNICALL Java_org_daemon_wrapper_LibC_pipe
  (JNIEnv *env, jclass claz){
	int file_pipes[2];
	if(pipe(file_pipes)==0){
		jintArray jarray = env->NewIntArray(2);
		env->SetIntArrayRegion(jarray, 0, 2, (jint *)file_pipes);
		return jarray;
	}
	return NULL;
  }

/*
 * Class:     org_daemon_wrapper_LibC
 * Method:    read
 * Signature: (I[CI)I
 */
JNIEXPORT jbyteArray JNICALL Java_org_daemon_wrapper_LibC_read
  (JNIEnv *env, jclass claz, jint fid,jint buf_len){
	  unsigned char  *p  = new unsigned char[buf_len+1];
	  jint data_processed = read(fid,p,buf_len);
	  jbyteArray jarray = env->NewByteArray(data_processed);
	  env->SetByteArrayRegion(jarray, 0, data_processed, (jbyte *)p);
	  free(p);
	  return jarray;
  }

/*
 * Class:     org_daemon_wrapper_LibC
 * Method:    write
 * Signature: (I[CI)I
 */
JNIEXPORT jint JNICALL Java_org_daemon_wrapper_LibC_write
  (JNIEnv *env, jclass claz, jint fid, jbyteArray datas){
	unsigned char  *p  =  NULL;
	jsize  len  =  env-> GetArrayLength(datas);
	if(len  <=  0)
	{
		return (jint)-1;
	}
	jbyte  *  arrayBody  =  env-> GetByteArrayElements(datas,0);
	p  =  new unsigned char[len+1];
	memcpy(p,  arrayBody,  len);
	p[len]=0;

	env-> ReleaseByteArrayElements(datas,  arrayBody,  0);
	jint data_processed = (jint)write(fid,(const void*)p,len);
	free(p);
	return data_processed;
 }

 
/*
 * Class:     org_daemon_wrapper_LibC
 * Method:    waitpid
 * Signature: (I[II)I
 */
JNIEXPORT jint JNICALL Java_org_daemon_wrapper_LibC_waitpid
  (JNIEnv *, jclass, jint pid, jintArray status, jint option){
	  
	  return waitpid(pid,(int*)status,option);
  }
  